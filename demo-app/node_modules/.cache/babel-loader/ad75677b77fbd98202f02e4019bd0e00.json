{"remainingRequest":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/LayerListControls.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/LayerListControls.vue","mtime":1604563862000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgd2F0Y2gsIHJlZiwgdG9SZWZzLCBjb21wdXRlZCB9IGZyb20gJ0B2dWUvY29tcG9zaXRpb24tYXBpJzsKaW1wb3J0IGFkZEluZGV4IGZyb20gJy4vYWRkLWluZGV4JzsKaW1wb3J0IGZpbmRJblRyZWUgZnJvbSAnLi9maW5kLWluLXRyZWUnOwppbXBvcnQgYWRkUGFyZW50SWRUb0xheWVycyBmcm9tICcuL2FkZC1wYXJlbnQtaWQtdG8tbGF5ZXJzJzsKaW1wb3J0IHVzZUxlZ2VuZCBmcm9tICcuL3VzZUxlZ2VuZCc7CmltcG9ydCB1c2VTZWxlY3RlZCBmcm9tICcuL3VzZVNlbGVjdGVkJzsKaW1wb3J0IHVzZVNvcnRhYmxlIGZyb20gJy4vdXNlU29ydGFibGUnOwoKdmFyIGRlbGV0ZUluZGV4ID0gZnVuY3Rpb24gZGVsZXRlSW5kZXgoaXRlbSkgewogIGRlbGV0ZSBpdGVtLmluZGV4OwogIHJldHVybiBpbmRleDsKfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgbGF5ZXJzOiBBcnJheQogIH0sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBjb250ZXh0KSB7CiAgICB2YXIgcm9vdCA9IHJlZihudWxsKTsKICAgIHZhciBvcGVuSXRlbXMgPSByZWYoW10pOwoKICAgIHZhciBfdG9SZWZzID0gdG9SZWZzKHByb3BzKSwKICAgICAgICBsYXllcnMgPSBfdG9SZWZzLmxheWVyczsKCiAgICB2YXIgbGF5ZXJzV2l0aFBhcmVudHMgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBhZGRQYXJlbnRJZFRvTGF5ZXJzKGxheWVycy52YWx1ZSk7CiAgICB9KTsKICAgIHZhciBsYXllcnNBcmVQcm92aWRlZCA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGxheWVyc1dpdGhQYXJlbnRzLnZhbHVlLmxlbmd0aCA+IDA7CiAgICB9KTsKCiAgICB2YXIgX3VzZVNlbGVjdGVkID0gdXNlU2VsZWN0ZWQoKSwKICAgICAgICBzZXRTZWxlY3RlZElkcyA9IF91c2VTZWxlY3RlZC5zZXRTZWxlY3RlZElkcywKICAgICAgICBzZWxlY3RlZElkcyA9IF91c2VTZWxlY3RlZC5zZWxlY3RlZElkczsKCiAgICB2YXIgX3VzZUxlZ2VuZCA9IHVzZUxlZ2VuZChzZWxlY3RlZElkcyksCiAgICAgICAgYWN0aXZlTGVnZW5kID0gX3VzZUxlZ2VuZC5hY3RpdmVMZWdlbmQsCiAgICAgICAgc2V0QWN0aXZlTGVnZW5kID0gX3VzZUxlZ2VuZC5zZXRBY3RpdmVMZWdlbmQ7CgogICAgdmFyIF91c2VTb3J0YWJsZSA9IHVzZVNvcnRhYmxlKGxheWVycywgcm9vdCwgb3Blbkl0ZW1zKSwKICAgICAgICBvblNvcnRpbmdDaGFuZ2UgPSBfdXNlU29ydGFibGUub25Tb3J0aW5nQ2hhbmdlOwoKICAgIHZhciBzb3J0ZWRTZWxlY3RlZExheWVycyA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHdpdGhJbmRleCA9IGFkZEluZGV4KGxheWVycy52YWx1ZSk7CiAgICAgIHJldHVybiBzZWxlY3RlZElkcy52YWx1ZS5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIGZpbmRJblRyZWUod2l0aEluZGV4LCAnaWQnLCBpZCk7CiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICByZXR1cm4gYi5pbmRleCAtIGEuaW5kZXg7CiAgICAgIH0pLm1hcChkZWxldGVJbmRleCk7CiAgICB9KTsKICAgIG9uU29ydGluZ0NoYW5nZShmdW5jdGlvbiAoc29ydGVkTGF5ZXJzKSB7CiAgICAgIHJldHVybiBjb250ZXh0LmVtaXQoJ2xheWVyLXNvcnRpbmctY2hhbmdlJywgc29ydGVkTGF5ZXJzKTsKICAgIH0pOwogICAgd2F0Y2goYWN0aXZlTGVnZW5kLCBmdW5jdGlvbiAobmV3QWN0aXZlTGVnZW5kKSB7CiAgICAgIHJldHVybiBjb250ZXh0LmVtaXQoJ2xlZ2VuZC1jaGFuZ2UnLCBuZXdBY3RpdmVMZWdlbmQpOwogICAgfSk7CiAgICB3YXRjaChzb3J0ZWRTZWxlY3RlZExheWVycywgZnVuY3Rpb24gKHNvcnRlZFNlbGVjdGVkKSB7CiAgICAgIHJldHVybiBjb250ZXh0LmVtaXQoJ2FjdGl2ZS1sYXllcnMtY2hhbmdlJywgc29ydGVkU2VsZWN0ZWQpOwogICAgfSk7CiAgICByZXR1cm4gewogICAgICByb290OiByb290LAogICAgICBvcGVuSXRlbXM6IG9wZW5JdGVtcywKICAgICAgbGF5ZXJzQXJlUHJvdmlkZWQ6IGxheWVyc0FyZVByb3ZpZGVkLAogICAgICBhY3RpdmVMZWdlbmQ6IGFjdGl2ZUxlZ2VuZCwKICAgICAgc2V0QWN0aXZlTGVnZW5kOiBzZXRBY3RpdmVMZWdlbmQsCiAgICAgIHNldFNlbGVjdGVkSWRzOiBzZXRTZWxlY3RlZElkcywKICAgICAgbGF5ZXJzV2l0aFBhcmVudHM6IGxheWVyc1dpdGhQYXJlbnRzCiAgICB9OwogIH0KfTs="},{"version":3,"sources":["LayerListControls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,QAAA,sBAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,UAAA,MAAA,gBAAA;AACA,OAAA,mBAAA,MAAA,2BAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,WAAA,MAAA,eAAA;;AAEA,IAAA,WAAA,GAAA,SAAA,WAAA,CAAA,IAAA,EAAA;AACA,SAAA,IAAA,CAAA,KAAA;AACA,SAAA,KAAA;AACA,CAHA;;AAKA,eAAA;AACA,EAAA,KAAA,EAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GADA;AAEA,EAAA,KAFA,iBAEA,KAFA,EAEA,OAFA,EAEA;AACA,QAAA,IAAA,GAAA,GAAA,CAAA,IAAA,CAAA;AACA,QAAA,SAAA,GAAA,GAAA,CAAA,EAAA,CAAA;;AAFA,kBAGA,MAAA,CAAA,KAAA,CAHA;AAAA,QAGA,MAHA,WAGA,MAHA;;AAIA,QAAA,iBAAA,GAAA,QAAA,CAAA;AAAA,aAAA,mBAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AAAA,KAAA,CAAA;AACA,QAAA,iBAAA,GAAA,QAAA,CAAA;AAAA,aAAA,iBAAA,CAAA,KAAA,CAAA,MAAA,GAAA,CAAA;AAAA,KAAA,CAAA;;AALA,uBAMA,WAAA,EANA;AAAA,QAMA,cANA,gBAMA,cANA;AAAA,QAMA,WANA,gBAMA,WANA;;AAAA,qBAOA,SAAA,CAAA,WAAA,CAPA;AAAA,QAOA,YAPA,cAOA,YAPA;AAAA,QAOA,eAPA,cAOA,eAPA;;AAAA,uBAQA,WAAA,CAAA,MAAA,EAAA,IAAA,EAAA,SAAA,CARA;AAAA,QAQA,eARA,gBAQA,eARA;;AAUA,QAAA,oBAAA,GAAA,QAAA,CAAA,YAAA;AACA,UAAA,SAAA,GAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA,aAAA,WAAA,CAAA,KAAA,CACA,GADA,CACA,UAAA,EAAA;AAAA,eAAA,UAAA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,CAAA;AAAA,OADA,EAEA,IAFA,CAEA,UAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,KAAA;AAAA,OAFA,EAGA,GAHA,CAGA,WAHA,CAAA;AAIA,KANA,CAAA;AAQA,IAAA,eAAA,CAAA,UAAA,YAAA;AAAA,aAAA,OAAA,CAAA,IAAA,CAAA,sBAAA,EAAA,YAAA,CAAA;AAAA,KAAA,CAAA;AACA,IAAA,KAAA,CAAA,YAAA,EAAA,UAAA,eAAA;AAAA,aAAA,OAAA,CAAA,IAAA,CAAA,eAAA,EAAA,eAAA,CAAA;AAAA,KAAA,CAAA;AACA,IAAA,KAAA,CAAA,oBAAA,EAAA,UAAA,cAAA;AAAA,aAAA,OAAA,CAAA,IAAA,CAAA,sBAAA,EAAA,cAAA,CAAA;AAAA,KAAA,CAAA;AAEA,WAAA;AAAA,MAAA,IAAA,EAAA,IAAA;AAAA,MAAA,SAAA,EAAA,SAAA;AAAA,MAAA,iBAAA,EAAA,iBAAA;AAAA,MAAA,YAAA,EAAA,YAAA;AAAA,MAAA,eAAA,EAAA,eAAA;AAAA,MAAA,cAAA,EAAA,cAAA;AAAA,MAAA,iBAAA,EAAA;AAAA,KAAA;AACA;AAzBA,CAAA","sourcesContent":["<template>\n  <div v-if=\"layersAreProvided\" ref=\"root\">\n    <v-treeview\n      :open.sync=\"openItems\"\n      selectable\n      :items=\"layersWithParents\"\n      @input=\"setSelectedIds\"\n      :open-all=\"true\"\n    >\n      <template v-slot:label=\"{ item, selected }\">\n        <div class=\"d-flex align-center\">\n          <span\n            class=\"sortable-handle\"\n            :data-id=\"item.id\"\n            :data-parent-ids=\"item.parentIds.toString()\"\n          >{{ item.name }}</span>\n          <v-btn\n            v-if=\"item.layer && selected\"\n            icon\n            class=\"ml-auto\"\n            @click=\"setActiveLegend(item.id)\"\n          >\n            <v-icon>\n              mdi-card-bulleted{{\n                item.id === activeLegend ? '' : '-off'\n              }}-outline\n            </v-icon>\n          </v-btn>\n        </div>\n      </template>\n    </v-treeview>\n  </div>\n</template>\n\n<script>\nimport { watch, ref, toRefs, computed } from '@vue/composition-api'\nimport addIndex from './add-index'\nimport findInTree from './find-in-tree'\nimport addParentIdToLayers from './add-parent-id-to-layers'\nimport useLegend from './useLegend'\nimport useSelected from './useSelected'\nimport useSortable from './useSortable'\n\nconst deleteIndex = item => {\n  delete item.index\n  return index\n}\n\nexport default {\n  props: { layers: Array },\n  setup(props, context) {\n    const root = ref(null)\n    const openItems = ref([])\n    const { layers } = toRefs(props)\n    const layersWithParents = computed(() => addParentIdToLayers(layers.value))\n    const layersAreProvided = computed(() => layersWithParents.value.length > 0)\n    const { setSelectedIds, selectedIds } = useSelected()\n    const { activeLegend, setActiveLegend } = useLegend(selectedIds)\n    const { onSortingChange } = useSortable(layers, root, openItems)\n\n    const sortedSelectedLayers = computed(() => {\n      const withIndex = addIndex(layers.value)\n      return selectedIds.value\n        .map(id => findInTree(withIndex, 'id', id))\n        .sort((a, b) => b.index - a.index)\n        .map(deleteIndex)\n    })\n\n    onSortingChange(sortedLayers => context.emit('layer-sorting-change', sortedLayers))\n    watch(activeLegend, newActiveLegend => context.emit('legend-change', newActiveLegend))\n    watch(sortedSelectedLayers, sortedSelected => context.emit('active-layers-change', sortedSelected))\n\n    return { root, openItems, layersAreProvided, activeLegend, setActiveLegend, setSelectedIds, layersWithParents }\n  },\n}\n</script>\n\n<style>\n.sortable-handle {\n  cursor: grab;\n}\n</style>"],"sourceRoot":"../component-library/src/components/LayerListControls"}]}