{"remainingRequest":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/add-index.js","dependencies":[{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/add-index.js","mtime":1604565041000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1ZvbHVtZXMvVm9vcmhvZWRlL3d3dy9kZWx0YXJlcy9kZWx0YS12dWUtY29tcG9uZW50cy9kZW1vLWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CgovKiogQHR5cGVkZWYge2ltcG9ydCgnLi9fdHlwZXMnKS5MYXllcn0gTGF5ZXIgKi8KCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL190eXBlcycpLkxheWVyR3JvdXB9IExheWVyR3JvdXAgKi8KCi8qKiBAdHlwZWRlZiB7TGF5ZXIgJiB7IGluZGV4OiBOdW1iZXIgfX0gTGF5ZXJXaXRoSW5kZXggKi8KCi8qKiBAdHlwZWRlZiB7TGF5ZXJHcm91cCAmIHsgY2hpbGRyZW46IExheWVyR3JvdXBbXSB8IExheWVyV2l0aEluZGV4W10gfX0gTGF5ZXJHcm91cFdpdGhJbmRleCAqLwoKLyoqIEB0eXBlZGVmIHt7IHZhbHVlOiBOdW1iZXIgfX0gTGF5ZXJJbmRleCAqLwoKLyoqCiAqIEB0eXBlZGVmIEluZGV4CiAqIEBwcm9wZXJ0eSB7KCkgPT4gTnVtYmVyfSBnZXRWYWx1ZQogKiBAcHJvcGVydHkgeygpID0+IE51bWJlcn0gaW5jcmVtZW50CiAqLwoKLyoqCiAqIFRoZSBjcmVhdGVJbmRleCBmdW5jdGlvbiBjcmVhdGVzIGEgY2xvc3VyZSBhcm91bmQgdGhlIGN1cnJlbnRJbmRleCBhbmQKICogcHJvdmlkZXMgbWV0aG9kcyB0byBpbmNyZWFzZSBhbmQgcmVhZCB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnRJbmRleCB2YWx1ZS4KICogV2UgZG8gdGhpcyBiZWNhdXNlIHdlIG5lZWQgdG8ga2VlcCBhIHJlZmVyZW5jZSBvZiB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUKICogcmVjdXJzaXZlIGZ1bmN0aW9uLgogKiAKICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIGluaXRpYWwgdmFsdWUKICogQHJldHVybnMge0luZGV4fQogKi8KZnVuY3Rpb24gY3JlYXRlSW5kZXgodmFsdWUpIHsKICB2YXIgY3VycmVudEluZGV4ID0gdmFsdWU7CiAgcmV0dXJuIHsKICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHsKICAgICAgcmV0dXJuIGN1cnJlbnRJbmRleDsKICAgIH0sCiAgICBpbmNyZW1lbnQ6IGZ1bmN0aW9uIGluY3JlbWVudCgpIHsKICAgICAgcmV0dXJuIGN1cnJlbnRJbmRleCsrOwogICAgfQogIH07Cn0KLyoqCiAqIFtSZWN1cnNpdmVdCiAqIFJldmVyc2VzIGFsbCBpdGVtcyBpbiB0aGUgYXJyYXkgYXMgd2VsbCBhcyB0aGUgYXJyYXkgb2YgdGhlIGBjaGlsZHJlbmAgcHJvcGVydHkKICogCiAqIEBwYXJhbSB7TGF5ZXJHcm91cFtdIHwgTGF5ZXJHcm91cFdpdGhJbmRleFtdfSBsaXN0IAogKiBAcmV0dXJucyB7TGF5ZXJHcm91cFtdIHwgTGF5ZXJHcm91cFdpdGhJbmRleFtdfQogKi8KCgpmdW5jdGlvbiByZXZlcnNlKGxpc3QpIHsKICByZXR1cm4gbGlzdC5yZXZlcnNlKCkubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICByZXR1cm4gaXRlbS5jaGlsZHJlbiA/IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbSksIHt9LCB7CiAgICAgIGNoaWxkcmVuOiByZXZlcnNlKGl0ZW0uY2hpbGRyZW4pCiAgICB9KSA6IGl0ZW07CiAgfSk7Cn0KLyoqCiAqIFtSZWN1cnNpdmVdCiAqIEFkZHMgaW5kZXhlcyB0byBhbGwgbGF5ZXJzIGluIGEgTGF5ZXJHcm91cAogKiAKICogQHBhcmFtIHtMYXllckdyb3VwW119IGxpc3QKICogQHBhcmFtIHtJbmRleH0gaW5kZXgKICogQHJldHVybnMge0xheWVyR3JvdXBXaXRoSW5kZXhbXX0KICovCgoKZnVuY3Rpb24gYWRkSW5kZXhUb0xheWVycyhsaXN0LCBpbmRleCkgewogIHJldHVybiBsaXN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgaWYgKGl0ZW0udXJsKSB7CiAgICAgIGluZGV4LmluY3JlbWVudCgpOwogICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBpdGVtKSwge30sIHsKICAgICAgICBpbmRleDogaW5kZXguZ2V0VmFsdWUoKQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGl0ZW0pLCB7fSwgewogICAgICAgIGNoaWxkcmVuOiBhZGRJbmRleFRvTGF5ZXJzKGl0ZW0uY2hpbGRyZW4sIGluZGV4KQogICAgICB9KTsKICAgIH0KICB9KTsKfQovKioKICogCiAqIEBwYXJhbSB7TGF5ZXJHcm91cFtdfSBzb3VyY2UgCiAqIEByZXR1cm5zIHtMYXllckdyb3VwV2l0aEluZGV4W119CiAqLwoKCmZ1bmN0aW9uIGFkZEluZGV4KHNvdXJjZSkgewogIC8qKiBAdHlwZSB7SW5kZXh9ICovCiAgdmFyIGluZGV4ID0gY3JlYXRlSW5kZXgoLTEpOwogIC8qKiBAdHlwZSB7TGF5ZXJHcm91cFtdfSAqLwoKICB2YXIgX3NvdXJjZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc291cmNlKSk7CgogIHZhciByZXZlcnNlZCA9IHJldmVyc2UoX3NvdXJjZSk7CiAgdmFyIHdpdGhJbmRleCA9IGFkZEluZGV4VG9MYXllcnMocmV2ZXJzZWQsIGluZGV4KTsKICB2YXIgbm9ybWFsaXNlZCA9IHJldmVyc2Uod2l0aEluZGV4KTsKICByZXR1cm4gbm9ybWFsaXNlZDsKfQoKZXhwb3J0IGRlZmF1bHQgYWRkSW5kZXg7"},{"version":3,"sources":["/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/add-index.js"],"names":["createIndex","value","currentIndex","getValue","increment","reverse","list","map","item","children","addIndexToLayers","index","url","addIndex","source","_source","JSON","parse","stringify","reversed","withIndex","normalised"],"mappings":";;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAMC;;;;;;;;;AASD,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,YAAY,GAAGD,KAAnB;AACA,SAAO;AACLE,IAAAA,QAAQ,EAAE;AAAA,aAAMD,YAAN;AAAA,KADL;AAELE,IAAAA,SAAS,EAAE;AAAA,aAAMF,YAAY,EAAlB;AAAA;AAFN,GAAP;AAID;AAED;;;;;;;;;AAOA,SAASG,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAOA,IAAI,CACRD,OADI,GAEJE,GAFI,CAEA,UAAAC,IAAI;AAAA,WACPA,IAAI,CAACC,QAAL,mCACSD,IADT;AACeC,MAAAA,QAAQ,EAAEJ,OAAO,CAACG,IAAI,CAACC,QAAN;AADhC,SAEID,IAHG;AAAA,GAFJ,CAAP;AAOD;AAED;;;;;;;;;;AAQA,SAASE,gBAAT,CAA0BJ,IAA1B,EAAgCK,KAAhC,EAAuC;AACrC,SAAOL,IAAI,CACRC,GADI,CACA,UAAAC,IAAI,EAAI;AACX,QAAIA,IAAI,CAACI,GAAT,EAAc;AACZD,MAAAA,KAAK,CAACP,SAAN;AACA,6CACKI,IADL;AAEEG,QAAAA,KAAK,EAAEA,KAAK,CAACR,QAAN;AAFT;AAID,KAND,MAMO;AACL,6CACKK,IADL;AAEEC,QAAAA,QAAQ,EAAEC,gBAAgB,CAACF,IAAI,CAACC,QAAN,EAAgBE,KAAhB;AAF5B;AAID;AACF,GAdI,CAAP;AAeD;AAED;;;;;;;AAKA,SAASE,QAAT,CAAkBC,MAAlB,EAA0B;AACxB;AACA,MAAIH,KAAK,GAAGX,WAAW,CAAC,CAAC,CAAF,CAAvB;AAEA;;AACA,MAAMe,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,MAAf,CAAX,CAAhB;;AACA,MAAMK,QAAQ,GAAGd,OAAO,CAACU,OAAD,CAAxB;AACA,MAAMK,SAAS,GAAGV,gBAAgB,CAACS,QAAD,EAAWR,KAAX,CAAlC;AACA,MAAMU,UAAU,GAAGhB,OAAO,CAACe,SAAD,CAA1B;AACA,SAAOC,UAAP;AACD;;AAED,eAAeR,QAAf","sourcesContent":["/** @typedef {import('./_types').Layer} Layer */\n/** @typedef {import('./_types').LayerGroup} LayerGroup */\n/** @typedef {Layer & { index: Number }} LayerWithIndex */\n/** @typedef {LayerGroup & { children: LayerGroup[] | LayerWithIndex[] }} LayerGroupWithIndex */\n/** @typedef {{ value: Number }} LayerIndex */\n/**\n * @typedef Index\n * @property {() => Number} getValue\n * @property {() => Number} increment\n */\n\n /**\n  * The createIndex function creates a closure around the currentIndex and\n  * provides methods to increase and read the value of the currentIndex value.\n  * We do this because we need to keep a reference of the current index in the\n  * recursive function.\n  * \n  * @param {Number} value initial value\n  * @returns {Index}\n  */\nfunction createIndex(value) {\n  let currentIndex = value\n  return {\n    getValue: () => currentIndex,\n    increment: () => currentIndex++\n  }\n}\n\n/**\n * [Recursive]\n * Reverses all items in the array as well as the array of the `children` property\n * \n * @param {LayerGroup[] | LayerGroupWithIndex[]} list \n * @returns {LayerGroup[] | LayerGroupWithIndex[]}\n */\nfunction reverse(list) {\n  return list\n    .reverse()\n    .map(item => \n      item.children\n        ? { ...item, children: reverse(item.children) }\n        : item\n    )\n}\n\n/**\n * [Recursive]\n * Adds indexes to all layers in a LayerGroup\n * \n * @param {LayerGroup[]} list\n * @param {Index} index\n * @returns {LayerGroupWithIndex[]}\n */\nfunction addIndexToLayers(list, index) {\n  return list\n    .map(item => {\n      if (item.url) {\n        index.increment()\n        return {\n          ...item,\n          index: index.getValue()\n        }\n      } else {\n        return {\n          ...item,\n          children: addIndexToLayers(item.children, index)\n        }\n      }\n    })\n}\n\n/**\n * \n * @param {LayerGroup[]} source \n * @returns {LayerGroupWithIndex[]}\n */\nfunction addIndex(source) {\n  /** @type {Index} */\n  let index = createIndex(-1)\n\n  /** @type {LayerGroup[]} */\n  const _source = JSON.parse(JSON.stringify(source))\n  const reversed = reverse(_source)\n  const withIndex = addIndexToLayers(reversed, index)\n  const normalised = reverse(withIndex)\n  return normalised\n}\n\nexport default addIndex"]}]}