{"remainingRequest":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/reorder-layers-array.js","dependencies":[{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/reorder-layers-array.js","mtime":1604395036000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgX3RvQXJyYXkgZnJvbSAiL1ZvbHVtZXMvVm9vcmhvZWRlL3d3dy9kZWx0YXJlcy9kZWx0YS12dWUtY29tcG9uZW50cy9kZW1vLWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9BcnJheSI7CmltcG9ydCBtb3ZlSW5BcnJheSBmcm9tICIuLi8uLi91dGlscy9tb3ZlLWluLWFycmF5IjsKCnZhciBpc0xheWVyR3JvdXAgPSBmdW5jdGlvbiBpc0xheWVyR3JvdXAoaXRlbSkgewogIHJldHVybiBCb29sZWFuKGl0ZW0uY2hpbGRyZW4pOwp9OwoKZnVuY3Rpb24gd2Fsa0dyb3VwKHBhcmVudElkcywgb2xkSW5kZXgsIG5ld0luZGV4KSB7CiAgLyoqIEBwYXJhbSB7TGF5ZXJHcm91cH0gZ3JvdXAgKi8KICBmdW5jdGlvbiBleGVjdXRlKGdyb3VwKSB7CiAgICB2YXIgZ3JvdXBJZCA9IGdyb3VwLmlkOwoKICAgIHZhciBfcGFyZW50SWRzID0gX3RvQXJyYXkocGFyZW50SWRzKSwKICAgICAgICBwYXJlbnRJZCA9IF9wYXJlbnRJZHNbMF0sCiAgICAgICAgcmVzdCA9IF9wYXJlbnRJZHMuc2xpY2UoMSk7IC8vIE15IGlkIGlzIGF0IHRoZSByb290IG9mIHRoZSBsaXN0LiBJIGFtIGEgKGdyYW5kKSBwYXJlbnQKCgogICAgaWYgKGdyb3VwSWQgPT09IHBhcmVudElkKSB7CiAgICAgIC8vIEknbSB0aGUgbGFzdCBpZCBvZiB0aGUgUGFyZW50IElkcywgTXkgY2hpbGRyZW4gbmVlZCB0byBiZSByZW9yZGVyZAogICAgICBpZiAocmVzdC5sZW5ndGggPT09IDApIHsKICAgICAgICBncm91cC5jaGlsZHJlbiA9IG1vdmVJbkFycmF5KGdyb3VwLmNoaWxkcmVuLCBvbGRJbmRleCwgbmV3SW5kZXgpOyAvLyBJJ20gbm90IHRoZSBsYXN0IGlkIG9mIHRoZSBQYXJlbnQgSWRzLCBhIGdyYW5ka2lkIG9mIG1lIG5lZWRzIHRvIGJlIAogICAgICAgIC8vIHJlb3JkZXJkLiAKICAgICAgfSBlbHNlIHsKICAgICAgICBncm91cC5jaGlsZHJlbiA9IGdyb3VwLmNoaWxkcmVuLm1hcCh3YWxrR3JvdXAocmVzdCwgb2xkSW5kZXgsIG5ld0luZGV4KSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZ3JvdXA7CiAgfQoKICByZXR1cm4gZXhlY3V0ZTsKfQovKioKICogUmVvcmRlcnMgYW4gaXRlbSBpbiB0aGUgbGF5ZXJzIGFycmF5LgogKiBAcGFyYW0ge0xheWVyR3JvdXBbXX0gc291cmNlCiAqIEBwYXJhbSB7TnVtYmVyfSBvbGRJbmRleAogKiBAcGFyYW0ge051bWJlcn0gbmV3SW5kZXgKICogQHBhcmFtIHtTdHJpbmdbXX0gcGFyZW50SWRzCiAqLwoKCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlb3JkZXJMYXllckFycmF5KHNvdXJjZSwgcGFyZW50SWRzLCBvbGRJbmRleCwgbmV3SW5kZXgpIHsKICAvLyBXZSBjbG9uZSB0aGUgc291cmNlIHNvIHdlIGNhbiBtdXRhdGUgdGhlIGNsb25lIGluIHBsYWNlCiAgdmFyIF9zb3VyY2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNvdXJjZSkpOyAvLyBUaGUgcm9vdCBsaXN0IGlzIGJlaW5nIHJlb3JkZXJkCgoKICBpZiAocGFyZW50SWRzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIG1vdmVJbkFycmF5KF9zb3VyY2UsIG9sZEluZGV4LCBuZXdJbmRleCk7CiAgfSAvLyBBIG5lc3RlZCBsaXN0IGlzIGJlaW5nIHJlb3JkZXJkCgoKICByZXR1cm4gX3NvdXJjZS5tYXAod2Fsa0dyb3VwKHBhcmVudElkcywgb2xkSW5kZXgsIG5ld0luZGV4KSk7Cn0="},{"version":3,"sources":["/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/reorder-layers-array.js"],"names":["moveInArray","isLayerGroup","item","Boolean","children","walkGroup","parentIds","oldIndex","newIndex","execute","group","groupId","id","parentId","rest","length","map","reorderLayerArray","source","_source","JSON","parse","stringify"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,2BAAxB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACD,IAAI,CAACE,QAAN,CAAX;AAAA,CAAzB;;AAEA,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAkD;AAEhD;AACA,WAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAMC,OAAO,GAAGD,KAAK,CAACE,EAAtB;;AADsB,8BAEQN,SAFR;AAAA,QAEdO,QAFc;AAAA,QAEDC,IAFC,wBAItB;;;AACA,QAAIH,OAAO,KAAKE,QAAhB,EAA0B;AAExB;AACA,UAAIC,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrBL,QAAAA,KAAK,CAACN,QAAN,GAAiBJ,WAAW,CAACU,KAAK,CAACN,QAAP,EAAiBG,QAAjB,EAA2BC,QAA3B,CAA5B,CADqB,CAGvB;AACA;AACC,OALD,MAKO;AACLE,QAAAA,KAAK,CAACN,QAAN,GAAiBM,KAAK,CAACN,QAAN,CAAeY,GAAf,CAAmBX,SAAS,CAACS,IAAD,EAAOP,QAAP,EAAiBC,QAAjB,CAA5B,CAAjB;AACD;AACF;;AAED,WAAOE,KAAP;AACD;;AAED,SAAOD,OAAP;AACD;AAED;;;;;;;;;AAOA,eAAe,SAASQ,iBAAT,CAA2BC,MAA3B,EAAmCZ,SAAnC,EAA8CC,QAA9C,EAAwDC,QAAxD,EAAkE;AAC/E;AACA,MAAMW,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,MAAf,CAAX,CAAhB,CAF+E,CAI/E;;;AACA,MAAIZ,SAAS,CAACS,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOf,WAAW,CAACmB,OAAD,EAAUZ,QAAV,EAAoBC,QAApB,CAAlB;AACD,GAP8E,CAS/E;;;AACA,SAAOW,OAAO,CAACH,GAAR,CAAYX,SAAS,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,CAArB,CAAP;AACD","sourcesContent":["import moveInArray from \"../../utils/move-in-array\";\n\nconst isLayerGroup = item => Boolean(item.children)\n\nfunction walkGroup(parentIds, oldIndex, newIndex) {\n\n  /** @param {LayerGroup} group */\n  function execute(group) {\n    const groupId = group.id\n    const [ parentId, ...rest ] = parentIds\n\n    // My id is at the root of the list. I am a (grand) parent\n    if (groupId === parentId) {\n\n      // I'm the last id of the Parent Ids, My children need to be reorderd\n      if (rest.length === 0) {\n        group.children = moveInArray(group.children, oldIndex, newIndex)\n\n      // I'm not the last id of the Parent Ids, a grandkid of me needs to be \n      // reorderd. \n      } else {\n        group.children = group.children.map(walkGroup(rest, oldIndex, newIndex))\n      }\n    }\n    \n    return group\n  }\n\n  return execute\n}\n\n/**\n * Reorders an item in the layers array.\n * @param {LayerGroup[]} source\n * @param {Number} oldIndex\n * @param {Number} newIndex\n * @param {String[]} parentIds\n */\nexport default function reorderLayerArray(source, parentIds, oldIndex, newIndex) {\n  // We clone the source so we can mutate the clone in place\n  const _source = JSON.parse(JSON.stringify(source))\n\n  // The root list is being reorderd\n  if (parentIds.length === 0) {\n    return moveInArray(_source, oldIndex, newIndex)\n  }\n\n  // A nested list is being reorderd\n  return _source.map(walkGroup(parentIds, oldIndex, newIndex))\n}"]}]}