{"remainingRequest":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useLegend.js","dependencies":[{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useLegend.js","mtime":1604566041000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwoKLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdXNlU2VsZWN0ZWQnKS5TZWxlY3RlZElkc30gU2VsZWN0ZWRJZHMgKi8KCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3VzZVNlbGVjdGVkJykuU2VsZWN0ZWRJZHNSZWZ9IFNlbGVjdGVkSWRzUmVmICovCgovKiogQHR5cGVkZWYge3sgdmFsdWU6IFN0cmluZyB9fSBBY3RpdmVMZWdlbmQgKi8KaW1wb3J0IHsgcmVmLCB3YXRjaCB9IGZyb20gJ0B2dWUvY29tcG9zaXRpb24tYXBpJzsKaW1wb3J0IGxhc3QgZnJvbSAnLi4vLi4vdXRpbHMvbGFzdCc7Ci8qKiBAcGFyYW0ge1NlbGVjdGVkSWRzUmVmfSBzZWxlY3RlZElkcyAqLwoKZnVuY3Rpb24gdXNlTGVnZW5kKHNlbGVjdGVkSWRzKSB7CiAgLyoqIEB0eXBlIHtBY3RpdmVMZWdlbmR9ICovCiAgdmFyIGFjdGl2ZUxlZ2VuZCA9IHJlZignJyk7CiAgLyoqIEBwYXJhbSB7U3RyaW5nfSBpZCAqLwoKICBmdW5jdGlvbiBzZXRBY3RpdmVMZWdlbmQoaWQpIHsKICAgIGFjdGl2ZUxlZ2VuZC52YWx1ZSA9IGFjdGl2ZUxlZ2VuZC52YWx1ZSA9PT0gaWQgPyAnJyA6IGlkOwogIH0KICAvKioKICAgKiBIYW5kbGVyIGZvciB3aGVuIGBzZWxlY3RlZElkc2AgY2hhbmdlLgogICAqIEBwYXJhbSB7U2VsZWN0ZWRJZHN9IG5ld1NlbGVjdGVkSWRzCiAgICovCgoKICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RlZElkc0NoYW5nZShuZXdTZWxlY3RlZElkcykgewogICAgaWYgKG5ld1NlbGVjdGVkSWRzLmluY2x1ZGVzKGFjdGl2ZUxlZ2VuZC52YWx1ZSkpIHJldHVybjsKICAgIHZhciBsYXN0U2VsZWN0ZWRJZCA9IGxhc3QobmV3U2VsZWN0ZWRJZHMpOwogICAgc2V0QWN0aXZlTGVnZW5kKGxhc3RTZWxlY3RlZElkKTsKICB9CgogIHdhdGNoKHNlbGVjdGVkSWRzLCBoYW5kbGVTZWxlY3RlZElkc0NoYW5nZSk7CiAgcmV0dXJuIHsKICAgIGFjdGl2ZUxlZ2VuZDogYWN0aXZlTGVnZW5kLAogICAgc2V0QWN0aXZlTGVnZW5kOiBzZXRBY3RpdmVMZWdlbmQKICB9Owp9CgpleHBvcnQgZGVmYXVsdCB1c2VMZWdlbmQ7"},{"version":3,"sources":["/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useLegend.js"],"names":["ref","watch","last","useLegend","selectedIds","activeLegend","setActiveLegend","id","value","handleSelectedIdsChange","newSelectedIds","includes","lastSelectedId"],"mappings":";;;AAAA;;AACA;;AACA;AAEA,SAASA,GAAT,EAAcC,KAAd,QAA2B,sBAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AAEA;;AACA,SAASC,SAAT,CAAmBC,WAAnB,EAAgC;AAE9B;AACA,MAAMC,YAAY,GAAGL,GAAG,CAAC,EAAD,CAAxB;AAEA;;AACA,WAASM,eAAT,CAAyBC,EAAzB,EAA6B;AAC3BF,IAAAA,YAAY,CAACG,KAAb,GAAqBH,YAAY,CAACG,KAAb,KAAuBD,EAAvB,GACjB,EADiB,GAEjBA,EAFJ;AAGD;AAED;;;;;;AAIA,WAASE,uBAAT,CAAiCC,cAAjC,EAAiD;AAC/C,QAAIA,cAAc,CAACC,QAAf,CAAwBN,YAAY,CAACG,KAArC,CAAJ,EAAiD;AAEjD,QAAMI,cAAc,GAAGV,IAAI,CAACQ,cAAD,CAA3B;AACAJ,IAAAA,eAAe,CAACM,cAAD,CAAf;AACD;;AAEDX,EAAAA,KAAK,CAACG,WAAD,EAAcK,uBAAd,CAAL;AAEA,SAAO;AACLJ,IAAAA,YAAY,EAAZA,YADK;AAELC,IAAAA,eAAe,EAAfA;AAFK,GAAP;AAID;;AAED,eAAeH,SAAf","sourcesContent":["/** @typedef {import('./useSelected').SelectedIds} SelectedIds */\n/** @typedef {import('./useSelected').SelectedIdsRef} SelectedIdsRef */\n/** @typedef {{ value: String }} ActiveLegend */\n\nimport { ref, watch } from '@vue/composition-api'\nimport last from '../../utils/last'\n\n/** @param {SelectedIdsRef} selectedIds */\nfunction useLegend(selectedIds) {\n\n  /** @type {ActiveLegend} */\n  const activeLegend = ref('')\n\n  /** @param {String} id */\n  function setActiveLegend(id) {\n    activeLegend.value = activeLegend.value === id\n      ? ''\n      : id\n  }\n\n  /**\n   * Handler for when `selectedIds` change.\n   * @param {SelectedIds} newSelectedIds\n   */\n  function handleSelectedIdsChange(newSelectedIds) {\n    if (newSelectedIds.includes(activeLegend.value)) return\n\n    const lastSelectedId = last(newSelectedIds)\n    setActiveLegend(lastSelectedId)\n  }\n\n  watch(selectedIds, handleSelectedIdsChange)\n\n  return {\n    activeLegend,\n    setActiveLegend,\n  }\n}\n\nexport default useLegend"]}]}