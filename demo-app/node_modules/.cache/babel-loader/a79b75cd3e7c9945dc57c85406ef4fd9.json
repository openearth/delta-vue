{"remainingRequest":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js!/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js??ref--13-0!/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useSortable.js","dependencies":[{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useSortable.js","mtime":1604416097000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/Voorhoede/www/deltares/delta-vue-components/demo-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gIi9Wb2x1bWVzL1Zvb3Job2VkZS93d3cvZGVsdGFyZXMvZGVsdGEtdnVlLWNvbXBvbmVudHMvZGVtby1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Wb2x1bWVzL1Zvb3Job2VkZS93d3cvZGVsdGFyZXMvZGVsdGEtdnVlLWNvbXBvbmVudHMvZGVtby1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVm9sdW1lcy9Wb29yaG9lZGUvd3d3L2RlbHRhcmVzL2RlbHRhLXZ1ZS1jb21wb25lbnRzL2RlbW8tYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IHsgcmVmLCB3YXRjaCwgbmV4dFRpY2ssIG9uTW91bnRlZCB9IGZyb20gJ0B2dWUvY29tcG9zaXRpb24tYXBpJzsKaW1wb3J0IHsgU29ydGFibGUgfSBmcm9tICJzb3J0YWJsZWpzIjsKaW1wb3J0IHJlb3JkZXJMYXllckFycmF5IGZyb20gIi4vcmVvcmRlci1sYXllcnMtYXJyYXkiOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTb3J0YWJsZShsYXllcnMsIGNvbXBvbmVudFJvb3QsIG9wZW5JdGVtcykgewogIHZhciB0cmVlVmlld1Jvb3RTZWxlY3RvciA9ICcudi10cmVldmlldyc7CiAgdmFyIHRyZWVWaWV3Q2hpbGRTZWxlY3RvciA9ICcudi10cmVldmlldy1ub2RlX19jaGlsZHJlbic7CiAgdmFyIHBhcmVudElkc1NlbGVjdG9yID0gJ2RhdGEtcGFyZW50LWlkcyc7CiAgdmFyIGhhbmRsZVNlbGVjdG9yID0gJy5zb3J0YWJsZS1oYW5kbGUnOwogIHZhciBjYWxsYmFja3MgPSBbXTsKICB2YXIgaXNNb3VudGVkID0gcmVmKGZhbHNlKTsKICB2YXIgc29ydEluc3RhbmNlcyA9IFtdOwogIHZhciBjb25maWcgPSB7CiAgICBhbmltYXRpb246IDE1MCwKICAgIG9uVXBkYXRlOiBoYW5kbGVPcmRlclVwZGF0ZQogIH07CgogIGZ1bmN0aW9uIHJlZ2lzdGVyQ2FsbGJhY2soZm4pIHsKICAgIGNhbGxiYWNrcy5wdXNoKGZuKTsKICB9CgogIGZ1bmN0aW9uIGhhbmRsZU9yZGVyVXBkYXRlKGV2ZW50KSB7CiAgICB2YXIgb2xkRHJhZ2dhYmxlSW5kZXggPSBldmVudC5vbGREcmFnZ2FibGVJbmRleCwKICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGV2ZW50Lm5ld0RyYWdnYWJsZUluZGV4LAogICAgICAgICRpdGVtID0gZXZlbnQuaXRlbTsKICAgIHZhciAkaGFuZGxlID0gJGl0ZW0ucXVlcnlTZWxlY3RvcihoYW5kbGVTZWxlY3Rvcik7CiAgICB2YXIgcGFyZW50SWRzID0gJGhhbmRsZS5nZXRBdHRyaWJ1dGUocGFyZW50SWRzU2VsZWN0b3IpOwoKICAgIGlmIChwYXJlbnRJZHMgPT09ICcnKSB7CiAgICAgIHBhcmVudElkcyA9IFtdOwogICAgfSBlbHNlIHsKICAgICAgcGFyZW50SWRzID0gcGFyZW50SWRzLnNwbGl0KCcsJyk7CiAgICB9CgogICAgdmFyIHJlb3JkZXJkTGF5ZXJzID0gcmVvcmRlckxheWVyQXJyYXkobGF5ZXJzLnZhbHVlLCBwYXJlbnRJZHMsIG9sZERyYWdnYWJsZUluZGV4LCBuZXdEcmFnZ2FibGVJbmRleCk7CiAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsKICAgICAgcmV0dXJuIGZuKHJlb3JkZXJkTGF5ZXJzKTsKICAgIH0pOwogIH0KCiAgd2F0Y2goW29wZW5JdGVtcywgaXNNb3VudGVkXSwgLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmKSB7CiAgICAgIHZhciBfcmVmMywgb3Blbkl0ZW1zLCBpc01vdW50ZWQsICRyb290RWwsICRjaGlsZEVscywgJHNvcnRhYmxlRWxzOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksIG9wZW5JdGVtcyA9IF9yZWYzWzBdLCBpc01vdW50ZWQgPSBfcmVmM1sxXTsKCiAgICAgICAgICAgICAgaWYgKCEob3Blbkl0ZW1zID09PSBbXSB8fCBpc01vdW50ZWQgPT09IGZhbHNlKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBuZXh0VGljaygpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHNvcnRJbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5kZXN0cm95KCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgc29ydEluc3RhbmNlcyA9IFtdOwogICAgICAgICAgICAgICRyb290RWwgPSBjb21wb25lbnRSb290LnZhbHVlLnF1ZXJ5U2VsZWN0b3IodHJlZVZpZXdSb290U2VsZWN0b3IpOwogICAgICAgICAgICAgICRjaGlsZEVscyA9IGNvbXBvbmVudFJvb3QudmFsdWUucXVlcnlTZWxlY3RvckFsbCh0cmVlVmlld0NoaWxkU2VsZWN0b3IpOwogICAgICAgICAgICAgICRzb3J0YWJsZUVscyA9IFskcm9vdEVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KCRjaGlsZEVscykpOwogICAgICAgICAgICAgICRzb3J0YWJsZUVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgaWYgKGVsKSB7CiAgICAgICAgICAgICAgICAgIHNvcnRJbnN0YW5jZXMucHVzaChuZXcgU29ydGFibGUoZWwsIGNvbmZpZykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpKTsKICBvbk1vdW50ZWQoIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaXNNb3VudGVkLnZhbHVlID0gdHJ1ZTsKCiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSkpOwogIHJldHVybiB7CiAgICBvblNvcnRpbmdDaGFuZ2U6IHJlZ2lzdGVyQ2FsbGJhY2sKICB9Owp9"},{"version":3,"sources":["/Volumes/Voorhoede/www/deltares/delta-vue-components/component-library/src/components/LayerListControls/useSortable.js"],"names":["ref","watch","nextTick","onMounted","Sortable","reorderLayerArray","useSortable","layers","componentRoot","openItems","treeViewRootSelector","treeViewChildSelector","parentIdsSelector","handleSelector","callbacks","isMounted","sortInstances","config","animation","onUpdate","handleOrderUpdate","registerCallback","fn","push","event","oldDraggableIndex","newDraggableIndex","$item","item","$handle","querySelector","parentIds","getAttribute","split","reorderdLayers","value","forEach","instance","destroy","$rootEl","$childEls","querySelectorAll","$sortableEls","el","onSortingChange"],"mappings":"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","sourcesContent":["import { ref, watch, nextTick, onMounted } from '@vue/composition-api'\nimport { Sortable } from \"sortablejs\";\nimport reorderLayerArray from \"./reorder-layers-array\";\n\nexport default function useSortable(layers, componentRoot, openItems) {\n  const treeViewRootSelector = '.v-treeview'\n  const treeViewChildSelector = '.v-treeview-node__children'\n  const parentIdsSelector = 'data-parent-ids'\n  const handleSelector = '.sortable-handle'\n  const callbacks = []\n\n  const isMounted = ref(false)\n  let sortInstances = []\n\n  const config = {\n    animation: 150,\n    onUpdate: handleOrderUpdate\n  }\n\n  function registerCallback(fn) {\n    callbacks.push(fn)\n  }\n\n  function handleOrderUpdate(event) {\n    const { oldDraggableIndex, newDraggableIndex, item: $item } = event;\n\n    const $handle = $item.querySelector(handleSelector);\n    let parentIds = $handle.getAttribute(parentIdsSelector);\n    if (parentIds === '') {\n      parentIds = []\n    } else {\n      parentIds = parentIds.split(',')\n    }\n\n    const reorderdLayers = reorderLayerArray(layers.value, parentIds, oldDraggableIndex, newDraggableIndex)\n    callbacks.forEach(fn => fn(reorderdLayers))\n  }\n\n  watch(\n    [openItems, isMounted],\n    async ([openItems, isMounted]) => {\n      if (openItems === [] || isMounted === false) return\n\n      await nextTick()\n      sortInstances.forEach(instance => instance.destroy())\n      sortInstances = []\n\n      const $rootEl = componentRoot.value.querySelector(treeViewRootSelector);\n      const $childEls = componentRoot.value.querySelectorAll(treeViewChildSelector);\n      const $sortableEls = [$rootEl, ...$childEls];\n\n      $sortableEls.forEach(el => {\n        if (el) {\n          sortInstances.push(new Sortable(el, config))\n        }\n      });\n    }\n  )\n\n  onMounted(async () => {\n    isMounted.value = true  \n  })\n\n  return {\n    onSortingChange: registerCallback\n  }\n}"]}]}